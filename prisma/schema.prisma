generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model Restaurant {
  id String @id @default(uuid())
  name String
  slug String @unique
  description String
  logoUrl String
  bannerUrl String
  categories Category[]
  products Product[]
  orders Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(uuid())
  name String
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id @default(uuid())
  name String
  description String
  price Float
  imageUrl String
  ingredients String[]
  orderProducts OrderProduct[]
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())
  total Float
  status OrderStatus
  orderType OrderType
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  orderProducts OrderProduct[]
  customerName String
  customerCpf String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderProduct {
  id String @id @default(uuid())
  quantity Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int
  price Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  PAYMENT_CONFIRMED
  PAYMENT_FAILED
}

enum OrderType {
  DINEIN
  TAKEAWAY
}